<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cache | Hobo Blog]]></title>
  <link href="http://blog.devhobo.com/blog/categories/cache/atom.xml" rel="self"/>
  <link href="http://blog.devhobo.com/"/>
  <updated>2014-10-17T12:27:39+08:00</updated>
  <id>http://blog.devhobo.com/</id>
  <author>
    <name><![CDATA[Hobo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BAE Cache&Redis实现ThinkPHP的Cache驱动]]></title>
    <link href="http://blog.devhobo.com/blog/2014/03/06/bae-redisshi-xian-thinkphpcache/"/>
    <updated>2014-03-06T19:00:00+08:00</updated>
    <id>http://blog.devhobo.com/blog/2014/03/06/bae-redisshi-xian-thinkphpcache</id>
    <content type="html"><![CDATA[<p>在BAE环境下有单独的Cache，同时也有Redis，可以同时用来做不同的Cache服务，先从Redis开始</p>

<p>1、Redis相关配置
{% codeblock conf.php lang:ruby %}</p>

<h1>BAE API Key与Secret Key</h1>

<p>&lsquo;BAE_AK&rsquo;    => &lsquo;XXX&rsquo;,
&lsquo;BAE_SK&rsquo;    => &lsquo;XXX&rsquo;,</p>

<h1>BAE Redis扩展配置</h1>

<p>&lsquo;BAE_REDIS_HOST&rsquo;   =>   &lsquo;redis.duapp.com&rsquo;,
&lsquo;BAE_REDIS_PORT&rsquo;   =>   80,
&lsquo;BAE_REDIS_DBNAME&rsquo; =>   &lsquo;XXX&rsquo;,</p>

<p>{% endcodeblock %}</p>

<p>可以选择将Redis是否设为默认缓存，如果不是，使用时注意切换
{% codeblock 使用切换 lang:ruby %}
$cache = Cache::getInstance(&lsquo;Baeredis&rsquo;,array());
{% endcodeblock %}</p>

<p>2、Redis Cache 驱动</p>

<!--more-->


<p>
{% codeblock CacheBaeredis.class.php lang:ruby %}</p>

<h1>根据CacheRedis.class.php修改</h1>

<p>&lt;?php</p>

<p>defined(&lsquo;THINK_PATH&rsquo;) or exit();</p>

<p>class CacheBaeredis extends Cache {</p>

<pre><code> /**
 * 架构函数
 * @param array $options 缓存参数
 * @access public
 */
public function __construct($options=array()) {
    if ( !extension_loaded('redis') ) {
        throw_exception(L('_NOT_SUPPERT_').':redis');
    }
    if(empty($options)) {
        $options = array (
            'host'          =&gt; C('BAE_REDIS_HOST') ? C('BAE_REDIS_HOST') : '127.0.0.1',
            'port'          =&gt; C('BAE_REDIS_PORT') ? C('BAE_REDIS_PORT') : 80,
            'timeout'       =&gt; C('DATA_CACHE_TIMEOUT') ? C('DATA_CACHE_TIMEOUT') : false,
            'persistent'    =&gt; false,
        );
    }
    $this-&gt;options =  $options;
    $this-&gt;options['expire'] =  isset($options['expire'])?  $options['expire']  :   C('DATA_CACHE_TIME');
    $this-&gt;options['prefix'] =  isset($options['prefix'])?  $options['prefix']  :   C('DATA_CACHE_PREFIX');        
    $this-&gt;options['length'] =  isset($options['length'])?  $options['length']  :   0;        

    try {
        /*建立连接后，在进行集合操作前，需要先进行auth验证*/
        $this-&gt;handler = new Redis();
        $ret;
        if ($options['timeout'] === false) {
            $ret = $this-&gt;handler-&gt;connect($options['host'], $options['port']);
        }
        else {
            $ret = $this-&gt;handler-&gt;connect($options['host'], $options['port'], $options['timeout']);
        }

        if ($ret === false) {
            throw new RedisException($this-&gt;handler-&gt;getLastError());
        }

        $user = C('BAE_AK');
        $pwd = C('BAE_SK');
        $dbname = C('BAE_REDIS_DBNAME');

        $ret = $this-&gt;handler-&gt;auth($user . "-" . $pwd . "-" . $dbname);
        if ($ret === false) {
            throw new RedisException($this-&gt;handler-&gt;getLastError());
        }

    } catch (RedisException $e) {
        throw_exception('BAE Redis:'.$e-&gt;getMessage());
    }


}

/**
 * 读取缓存
 * @access public
 * @param string $name 缓存变量名
 * @return mixed
 */
public function get($name) {
    N('cache_read',1);
    $value = $this-&gt;handler-&gt;get($this-&gt;options['prefix'].$name);
    $jsonData  = json_decode( $value, true );
    return ($jsonData === NULL) ? $value : $jsonData;   //检测是否为JSON数据 true 返回JSON解析数组, false返回源数据
}

/**
 * 写入缓存
 * @access public
 * @param string $name 缓存变量名
 * @param mixed $value  存储数据
 * @param integer $expire  有效时间（秒）
 * @return boolen
 */
public function set($name, $value, $expire = null) {
    N('cache_write',1);
    if(is_null($expire)) {
        $expire  =  $this-&gt;options['expire'];
    }
    $name   =   $this-&gt;options['prefix'].$name;
    //对数组/对象数据进行缓存处理，保证数据完整性
    $value  =  (is_object($value) || is_array($value)) ? json_encode($value) : $value;

    //相对CacheRedis的驱动增加了expire&gt;0的判断
    if(is_int($expire) &amp; $expire &gt; 0) {
        $result = $this-&gt;handler-&gt;setex($name, $expire, $value);
    }else{
        $result = $this-&gt;handler-&gt;set($name, $value);
    }
    if($result &amp;&amp; $this-&gt;options['length']&gt;0) {
        // 记录缓存队列
        $this-&gt;queue($name);
    }
    return $result;
}

/**
 * 删除缓存
 * @access public
 * @param string $name 缓存变量名
 * @return boolen
 */
public function rm($name) {
    return $this-&gt;handler-&gt;delete($this-&gt;options['prefix'].$name);
}

/**
 * 清除缓存
 * @access public
 * @return boolen
 */
public function clear() {
    return $this-&gt;handler-&gt;flushDB();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>3、BAE Cache驱动及配置</p>

<p>{% codeblock 配置 lang:ruby %}</p>

<h1>BAE API Key与Secret Key，前面已经有配置</h1>

<p>&lsquo;BAE_AK&rsquo;    => &lsquo;XXX&rsquo;,
&lsquo;BAE_SK&rsquo;    => &lsquo;XXX&rsquo;,</p>

<h1>设置自己的CacheID（资源名称）、Host和Port</h1>

<p>&lsquo;DATA_CACHE_TYPE&rsquo;   => &lsquo;Bae&rsquo;,       //设为默认
&lsquo;DATA_CACHE_ID&rsquo;     =>  &lsquo;XXX&rsquo;,
&lsquo;MEMCACHE_HOST&rsquo;     =>  &lsquo;cache.duapp.com&rsquo;,
&lsquo;MEMCACHE_PORT&rsquo;     =>  000,</p>

<h1>require_once(BAE_API_ROOT_PATH . &lsquo;BaeMemcache.class.php&rsquo;);</h1>

<h1>需要BAE相关的驱动文件，可以在index.php入口中添加Root Path方便使用，也可以自己修改定义</h1>

<p>define(&lsquo;BAE_API_ROOT_PATH&rsquo;, &lsquo;你的BAE驱动文件路径&rsquo;);</p>

<p>{% endcodeblock %}</p>

<p>{% codeblock CacheBae.class.php lang:ruby %}</p>

<p>&lt;?php
class CacheBae extends Cache {</p>

<pre><code>static $_cache;
private $_handler;

/**
 +----------------------------------------------------------
 * 架构函数
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 */
public function __construct($options='') {
    if(!empty($options)) {
        $this-&gt;options =  $options;
    }
    $this-&gt;options['expire'] = isset($options['expire'])?$options['expire']:C('DATA_CACHE_TIME');
    $this-&gt;options['length']  =  isset($options['length'])?$options['length']:0;
    $this-&gt;options['queque']  =  'bae';
    $this-&gt;init();
}

/**
 +----------------------------------------------------------
 * 初始化检查
 +----------------------------------------------------------
 * @access private
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
private function init() {
    require_once(BAE_API_ROOT_PATH . 'BaeMemcache.class.php');
    /*Cache配置信息，可查询Cache详情页*/
    $cacheid = C('DATA_CACHE_ID');
    $host = C('MEMCACHE_HOST');
    $port = C('MEMCACHE_PORT');
    $user = C('BAE_AK');
    $pwd = C('BAE_SK');

    $this-&gt;_handler = new BaeMemcache($cacheid,$host. ': '. $port, $user, $pwd);
    $this-&gt;connected = true;
}

/**
 +----------------------------------------------------------
 * 是否连接
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
private function isConnected() {
    return $this-&gt;connected;
}
/**
 +----------------------------------------------------------
 * 读取缓存
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @param string $name 缓存变量名
 +----------------------------------------------------------
 * @return mixed
 +----------------------------------------------------------
 */
public function get($name) {
    N('cache_read',1);
$content = $this-&gt;_handler-&gt;get($name);
if(false !== $content ){
        if(C('DATA_CACHE_COMPRESS') &amp;&amp; function_exists('gzcompress')) {
    $content = substr($content,0,-1);  //remvoe \0 in the end
    }
        if(C('DATA_CACHE_CHECK')) {//开启数据校验
            $check  =  substr($content,0, 32);
            $content   =  substr($content,32);
            if($check != md5($content)) {//校验错误
                return false;
            }
        }
        if(C('DATA_CACHE_COMPRESS') &amp;&amp; function_exists('gzcompress')) {
            //启用数据压缩
            $content   =   gzuncompress($content);
        }
        $content    =   unserialize($content);
    return $content;
    }
    else {
        return false;
    }
}

/**
 +----------------------------------------------------------
 * 写入缓存
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @param string $name 缓存变量名
 * @param mixed $value  存储数据
 * @param int $expire  有效时间 0为永久
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
public function set($name,$value,$expire=null) {
    N('cache_write',1);
    if(is_null($expire)) {
        $expire =  $this-&gt;options['expire'];
    }
    $data   =   serialize($value);
    if( C('DATA_CACHE_COMPRESS') &amp;&amp; function_exists('gzcompress')) {
        //数据压缩
    //    $data   =   gzcompress($data,3);
      $data =  gzencode($data) . "\0";
    }
    if(C('DATA_CACHE_CHECK')) {//开启数据校验
        $check  =  md5($data);
    }else {
        $check  =  '';
    }
$data = $check.$data;
$result =  $this-&gt;_handler-&gt;set($name,$data,0,intval($expire));
    if($result) {
        if($this-&gt;options['length']&gt;0) {
            // 记录缓存队列
            $this-&gt;queue($name);
        }
    return true;
    }else {
        return false;
    }
}

/**
 +----------------------------------------------------------
 * 删除缓存
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @param string $name 缓存变量名
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
public function rm($name) {
    return $this-&gt;_handler-&gt;delete($name);
}
static function queueSet($name,$value)
{
$h = new BaeMemcache();
if ( $h-&gt;set($name,$value) ){
    self::$_cache = array($name =&gt; $value);
}
}
static function queueGet($name)
{
if(isset(self::$_cache[$name]))
    return self::$_cache[$name];
$h = new BaeMemcache();
$r = $h-&gt;get($name);
if ( false === $r ){
    return false;
}
self::$_cache[$name] = $r;
return $r;
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
