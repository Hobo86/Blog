<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gorp | Hobo Blog]]></title>
  <link href="http://blog.devhobo.com/blog/categories/gorp/atom.xml" rel="self"/>
  <link href="http://blog.devhobo.com/"/>
  <updated>2014-10-17T13:26:20+08:00</updated>
  <id>http://blog.devhobo.com/</id>
  <author>
    <name><![CDATA[Hobo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go-Revel:Gorp连接MySQL]]></title>
    <link href="http://blog.devhobo.com/blog/2013/08/24/go-revel-gorplian-jie-mysql/"/>
    <updated>2013-08-24T09:22:00+08:00</updated>
    <id>http://blog.devhobo.com/blog/2013/08/24/go-revel-gorplian-jie-mysql</id>
    <content type="html"><![CDATA[<p>Revel连接数据库可以参考官方的Booking示例</p>

<p>除了Revel需要Gorp和MySQL驱动两个库
{% codeblock lang:ruby %}</p>

<h1>Gorp</h1>

<p>go get github.com/coopernurse/gorp</p>

<h1>MySQL驱动</h1>

<p>go get github.com/go-sql-driver/mysql  #也可以用其他的驱动库
{% endcodeblock %}</p>

<p>创建一个新的Revel工程app_name</p>

<!--more-->


<p></p>

<p>配置conf/app.conf
{% codeblock 数据库配置 lang:ruby %}</p>

<h1>DB username:@tcp(yourhost:port)/dbname</h1>

<p>db.import = github.com/Go-SQL-Driver/mysql
db.driver = mysql
db.spec   = root:@tcp(localhost:3306)/db_name
{% endcodeblock %}</p>

<p>创建models/user.go，先只定义几个测试字段
{% codeblock user.go lang:ruby %}
package models</p>

<p>type Post struct {</p>

<pre><code>UserId                          int
Name                string
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>创建controllers/init.go
{% codeblock init.go lang:ruby %}
package controllers</p>

<p>import &ldquo;github.com/robfig/revel&rdquo;</p>

<p>func init() {</p>

<pre><code>revel.OnAppStart(Init)
revel.InterceptMethod((*GorpController).Begin, revel.BEFORE)
revel.InterceptMethod((*GorpController).Commit, revel.AFTER)
revel.InterceptMethod((*GorpController).Rollback, revel.FINALLY)
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>创建controllers/gorp.go
{% codeblock gorp.go lang:ruby %}
package controllers</p>

<p>import (</p>

<pre><code>"database/sql"
"github.com/coopernurse/gorp"
_ "github.com/Go-SQL-Driver/mysql"
r "github.com/robfig/revel"
"github.com/robfig/revel/modules/db/app"
"app_name/app/models"
</code></pre>

<p>)</p>

<p>var (</p>

<pre><code>Dbm *gorp.DbMap
</code></pre>

<p>)</p>

<p>func Init() {</p>

<pre><code>db.Init()
//MySQL InnoDB UTF8
Dbm = &amp;gorp.DbMap{Db: db.Db, Dialect: gorp.MySQLDialect{"InnoDB", "UTF8"}}

setColumnSizes := func(t *gorp.TableMap, colSizes map[string]int) {
    for col, size := range colSizes {
        t.ColMap(col).MaxSize = size
    }
}

//创建一个User测试表
t := Dbm.AddTable(models.User{}).SetKeys(true, "UserId")
setColumnSizes(t, map[string]int{
    "Name": 20,
})

Dbm.TraceOn("[gorp]", r.INFO)
Dbm.CreateTables()

//插入一组测试数据
demoUser := &amp;models.User{0, "Hobo"}
if err := Dbm.Insert(demoUser); err != nil {
    panic(err)
}
</code></pre>

<p>}</p>

<p>type GorpController struct {</p>

<pre><code>*r.Controller
Txn *gorp.Transaction
</code></pre>

<p>}</p>

<p>func (c *GorpController) Begin() r.Result {</p>

<pre><code>txn, err := Dbm.Begin()
if err != nil {
    panic(err)
}
c.Txn = txn
return nil
</code></pre>

<p>}</p>

<p>func (c *GorpController) Commit() r.Result {</p>

<pre><code>if c.Txn == nil {
    return nil
}
if err := c.Txn.Commit(); err != nil &amp;&amp; err != sql.ErrTxDone {
    panic(err)
}
c.Txn = nil
return nil
</code></pre>

<p>}</p>

<p>func (c *GorpController) Rollback() r.Result {</p>

<pre><code>if c.Txn == nil {
    return nil
}
if err := c.Txn.Rollback(); err != nil &amp;&amp; err != sql.ErrTxDone {
    panic(err)
}
c.Txn = nil
return nil
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<p>修改controllers/app.go
{% codeblock 修改app.go lang:ruby %}</p>

<h1>import添加</h1>

<pre><code>"app_name/app/models"
</code></pre>

<h1>包含GorpController</h1>

<p>type App struct {</p>

<pre><code>GorpController
</code></pre>

<p>}</p>

<h1>测试查询</h1>

<p>func (c App) Index() revel.Result {</p>

<pre><code>greeting := "It works!"
</code></pre>

<p>  users, err := c.Txn.Select(models.User{}, <code>select * from user where Name="Hobo"</code>)
  if len(users) == 0 {</p>

<pre><code>greeting = "Null"
</code></pre>

<p>  } else {</p>

<pre><code>user := users[0].(*models.User)
greeting = user.Name
</code></pre>

<p>  }
  if err != nil {</p>

<pre><code>panic(err)
</code></pre>

<p>  }</p>

<pre><code>return c.Render(greeting)
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<p>修改views/App/Index.html
{% codeblock lang:ruby %}</p>

<h1><h1>It works</h1></h1>

<h1>/{/{.greeting/}/}</h1>


<p>      #去掉反斜杠
{% endcodeblock %}</p>

<p>运行测试下
{% codeblock lang:ruby %}
go run app_name
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
